Type.registerNamespace("NES.CPU.PixelWhizzlerClasses"); NES.CPU.PixelWhizzlerClasses.IPPU = function () { };
NES.CPU.PixelWhizzlerClasses.IPPU.prototype = { updatePixelInfo: null, get_backgroundVisible: null, checkVBlank: null, get_chrRomHandler: null, set_chrRomHandler: null, clearVINT: null, copySprites: null, get_currentFrame: null, get_currentXPosition: null, get_currentYPosition: null, drawTo: null, get_fillRGB: null, set_fillRGB: null, get_frameFinishHandler: null, set_frameFinishHandler: null, get_frameOn: null, set_frameOn: null, get_frames: null, getByte: null, handleEvent: null, get_handleVBlankIRQ: null, set_handleVBlankIRQ: null, get_hScroll: null,
    initialize: null, get_irqAsserted: null, set_irqAsserted: null, get_isDebugging: null, set_isDebugging: null, get_isRendering: null, get_lastcpuClock: null, set_lastcpuClock: null, get_maxSpritesPerScanline: null, set_maxSpritesPerScanline: null, get_nameTableMemoryStart: null, set_nameTableMemoryStart: null, get_needToDraw: null, get_nextEventAt: null, get_nmiHandler: null, set_nmiHandler: null, get_nmiIsThrown: null, get_outBuffer: null, get_palette: null, set_palette: null, get_patternTableIndex: null, get_pixelWidth: null, set_pixelWidth: null,
    get_ppuAddress: null, set_ppuAddress: null, get_ppuControlByte0: null, set_ppuControlByte0: null, get_ppuControlByte1: null, set_ppuControlByte1: null, get_ppuStatus: null, set_ppuStatus: null, preloadSprites: null, renderScanline: null, resetClock: null, get_scanlineNum: null, get_scanlinePos: null, setByte: null, setupVINT: null, setVideoBuffer: null, get_shouldRender: null, set_shouldRender: null, get_spriteCopyHasHappened: null, set_spriteCopyHasHappened: null, get_spriteRam: null, get_spritesAreVisible: null, get_spritesOnLine: null, unpackSprites: null,
    get_videoBuffer: null, vidRAM_GetNTByte: null, get_vScroll: null, getFrameChecksum: null
}; NES.CPU.PixelWhizzlerClasses.IPPU.registerInterface("NES.CPU.PixelWhizzlerClasses.IPPU"); Type.registerNamespace("NES.CPU.PPUClasses"); NES.CPU.PPUClasses.NESSprite = function () { }; NES.CPU.PPUClasses.NESSprite.prototype = { yPosition: 0, xPosition: 0, spriteNumber: 0, foreground: !1, isVisible: !1, tileIndex: 0, attributeByte: 0, flipX: !1, flipY: !1, changed: !1 };
var _p32 = new Int32Array(256), _framePalette = new Int32Array(256), rgb32OutBuffer = new Int32Array(65536), outBuffer = new Int32Array(65536), _drawInfo = new Int32Array(65536), _palette = new Int32Array(32), sprite0scanline = -1, sprite0x = -1, _spriteRAM = new Int32Array(256), _spritesOnLine = new Int32Array(512), _vBuffer = new Int32Array(61440), _spriteAddress = 0, _maxSpritesPerScanline = 8, currentSprites = Array(8), _unpackedSprites = Array(64); initSprites(); var currentXPosition = 0, currentYPosition = 0;
function get_currentYPosition() { return currentYPosition } function get_currentXPosition() { return currentXPosition } var _scanlineNum = 0, _scanlinePos = 0; function get_scanlinePos() { return _scanlinePos } function get_scanlineNum() { return _scanlineNum } var _isDebugging = !1; function get_isDebugging() { return _isDebugging } function set_isDebugging(a) { return _isDebugging = a }
function initializePPU() { _spriteAddress = _scanlinePos = _scanlineNum = _hScroll = _PPUControlByte1 = _PPUControlByte0 = _PPUStatus = _PPUAddress = 0; initSprites() } var _shouldRender = !1; function get_shouldRender() { return _shouldRender } function set_shouldRender(a) { return _shouldRender = a } var _vBuffer = null, _frames = 0; function get_frames() { return _frames } function vidRAM_GetNTByte(a) { var c = 0; return c = getPPUByte(0, a) } var hitSprite = !1, _handleVBlankIRQ = !1; function get_handleVBlankIRQ() { return _handleVBlankIRQ }
function set_handleVBlankIRQ(a) { return _handleVBlankIRQ = a } var _PPUControlByte0 = 0, _PPUControlByte1 = 0; function get_ppuControlByte0() { return _PPUControlByte0 } function set_ppuControlByte0(a) { _PPUControlByte0 !== a && (_PPUControlByte0 = a, _updatePPUControlByte0()); return a } function _updatePPUControlByte0() { _backgroundPatternTableIndex = (_PPUControlByte0 & 16) === 16 ? 4096 : 0 } function get_nmiIsThrown() { return (_PPUControlByte0 & 128) === 128 } function get_ppuControlByte1() { return _PPUControlByte1 }
function set_ppuControlByte1(a) { return _PPUControlByte1 = a } function get_backgroundVisible() { return _tilesAreVisible } var _spritesAreVisible = !1, _tilesAreVisible = !1; function get_spritesAreVisible() { return _spritesAreVisible } var _PPUStatus = 0; function get_ppuStatus() { return _PPUStatus } function set_ppuStatus(a) { return _PPUStatus = a } var _PPUAddress = 0; function get_ppuAddress() { return _PPUAddress } function set_ppuAddress(a) { return _PPUAddress = a }
var _ppuReadBuffer = 0, _ppuAddressLatchIsHigh = !0, _backgroundPatternTableIndex = 0; function get_patternTableIndex() { return _backgroundPatternTableIndex } var _needToDraw = !0; function get_needToDraw() { return _needToDraw } var _isRendering = !0; function get_isRendering() { return _isRendering } var frameClock = 0, frameEnded = !1, _frameOn = !1; function get_frameOn() { return _frameOn } function set_frameOn(a) { return _frameOn = a } var _nameTableMemoryStart = 0; function get_nameTableMemoryStart() { return _nameTableMemoryStart }
function set_nameTableMemoryStart(a) { return _nameTableMemoryStart = a } function get_currentFrame() { return _vBuffer } function renderScanline() { throw Error("Not Implemented"); } var lastcpuClock = 0; function get_lastcpuClock() { return lastcpuClock } function set_lastcpuClock(a) { return lastcpuClock = a } function drawTo(a) { var c = (a - lastcpuClock) * 3; frameClock < 6820 && (frameClock + c < 6820 ? (frameClock += c, c = 0) : (c += frameClock - 6820, frameClock = 6820)); bumpScanline(c); lastcpuClock = a }
function bumpScanline(a) {
    do {
        switch (frameClock++) { case 6820: clearVINT(); frameOn = _frameOn = !0; spriteChanges && (unpackSprites(), spriteChanges = !1); break; case 7161: currentYPosition = currentXPosition = yNTXor = xNTXor = vbufLocation = 0; break; case frameClockEnd: drawCurrentFrame(), _shouldRender = !0, frameOn = !1, setupVINT(), _frameOn = !1, frameClock = 0 } if (frameClock >= 7161 && frameClock <= 89342) {
            if (currentXPosition < 256 && vbufLocation < 61440) {
                xPosition = currentXPosition + lockedHScroll; (xPosition & 7) === 0 && (xNTXor = (xPosition & 256) === 256 ?
1024 : 0, xPosition &= 255, _fetchNextTile()); var c = _tilesAreVisible ? getNameTablePixel() : 0, b = _spritesAreVisible ? getSpritePixel() : 0; !hitSprite && spriteZeroHit && c !== 0 && (hitSprite = !0, _PPUStatus |= 64); writePixel(vbufLocation, _palette[spriteIsForegroundPixel || c === 0 && b !== 0 ? b : c]); vbufLocation++
            } currentXPosition++; currentXPosition > 340 && (currentXPosition = 0, currentYPosition++, preloadSprites(currentYPosition), _spritesOnThisScanline >= 7 && (_PPUStatus |= 32), lockedHScroll = _hScroll, updatePixelInfo(), runNewScanlineEvents())
        } 
    } while (a-- >
0)
} function get_outBuffer() { return outBuffer } function get_videoBuffer() { return rgb32OutBuffer } function setVideoBuffer(a) { rgb32OutBuffer = a } var _frameEnded = !1; function checkVBlank() { !_nmiHasBeenThrownThisFrame && !_frameOn && get_nmiIsThrown() && get__nmiOccurred() && (_nmiHandler.invoke(), set_handleVBlankIRQ(!0), _nmiHasBeenThrownThisFrame = !0) } var vbufLocation = 0, pixelWidth = 32; function get_pixelWidth() { return pixelWidth } function set_pixelWidth(a) { return pixelWidth = a } var _fillRGB = !1;
function get_fillRGB() { return _fillRGB } function set_fillRGB(a) { return _fillRGB = a } function updatePixelInfo() { _nameTableMemoryStart = nameTableBits * 1024 } var _clipTiles = !1, _clipSprites = !1; function _clippingTilePixels() { return _clipTiles } function _clippingSpritePixels() { return _clipSprites } var nameTableBits = 0, _vidRamIsRam = !0; function get_palette() { return _palette } function set_palette(a) { return _palette = a }
function setPPUByte(a, c, b) {
    _needToDraw = !0; switch (c & 7) {
        case 0: drawTo(a); _PPUControlByte0 = b; nameTableBits = _PPUControlByte0 & 3; _backgroundPatternTableIndex = ((_PPUControlByte0 & 16) >> 4) * 4096; updatePixelInfo(); break; case 1: drawTo(a); _isRendering = (b & 24) !== 0; _PPUControlByte1 = b; _spritesAreVisible = (_PPUControlByte1 & 16) === 16; _tilesAreVisible = (_PPUControlByte1 & 8) === 8; _clipTiles = (_PPUControlByte1 & 2) !== 2; _clipSprites = (_PPUControlByte1 & 4) !== 4; updatePixelInfo(); break; case 2: _ppuReadBuffer = b; break; case 3: _spriteAddress =
b & 255; break; case 4: _spriteRAM[_spriteAddress] = b; _spriteAddress = _spriteAddress + 1 & 255; spriteChanges = _unpackedSprites[_spriteAddress / 4].changed = !0; break; case 5: if (_ppuAddressLatchIsHigh) drawTo(a), _hScroll = b, lockedHScroll = _hScroll & 7, updatePixelInfo(), _ppuAddressLatchIsHigh = !1; else { drawTo(a); _vScroll = b; b > 240 && (_vScroll = b - 256); if (!_frameOn || _frameOn && !_isRendering) lockedVScroll = _vScroll; _ppuAddressLatchIsHigh = !0; updatePixelInfo() } break; case 6: _ppuAddressLatchIsHigh ? (_PPUAddress = _PPUAddress & 255 | (b & 63) <<
8, _ppuAddressLatchIsHigh = !1) : (_PPUAddress = _PPUAddress & 32512 | b & 255, _ppuAddressLatchIsHigh = !0, drawTo(a), _hScroll = (_PPUAddress & 31) << 3, _vScroll = (_PPUAddress >> 5 & 31) << 3, _vScroll |= _PPUAddress >> 12 & 3, nameTableBits = _PPUAddress >> 10 & 3, _frameOn && (lockedHScroll = _hScroll, lockedVScroll = _vScroll, lockedVScroll -= currentYPosition), updatePixelInfo()); break; case 7: (_PPUAddress & 65280) === 16128 ? (drawTo(a), writeToNESPalette(_PPUAddress, b), updatePixelInfo()) : (_PPUAddress & 61440) === 8192 ? chrRomHandler.setPPUByte(a, _PPUAddress,
b) : _vidRamIsRam && chrRomHandler.setPPUByte(a, _PPUAddress, b), _PPUAddress += (get_ppuControlByte0() & 4) === 4 ? 32 : 1, _ppuAddressLatchIsHigh = !0, set_ppuAddress(get_ppuAddress() & 16383)
    } 
}
function getPPUByte(a, c) {
    switch (c & 7) {
        case 0: case 1: case 5: case 6: return _ppuReadBuffer; case 2: var b; _ppuAddressLatchIsHigh = !0; b = _ppuReadBuffer & 31 | _PPUStatus; drawTo(a); (b & 128) === 128 && (_PPUStatus &= -129); updatePixelInfo(); return b; case 4: return b = _spriteRAM[_spriteAddress]; case 7: return (get_ppuAddress() & 65280) === 16128 ? (b = _palette[get_ppuAddress() & 31], _ppuReadBuffer = chrRomHandler.getPPUByte(a, _PPUAddress - 4096)) : (b = _ppuReadBuffer, _ppuReadBuffer = (_PPUAddress >= 8192 & _PPUAddress <= 12287) === 1 ? chrRomHandler.getPPUByte(a,
_PPUAddress) : chrRomHandler.getPPUByte(a, _PPUAddress & 16383)), _PPUAddress += (_PPUControlByte0 & 4) === 4 ? 32 : 1, _PPUAddress &= 16383, b
    } return 0
} var _nmiHandler = null; function get_nmiHandler() { return _nmiHandler } function set_nmiHandler(a) { return _nmiHandler = a } function get_irqAsserted() { return !1 } function set_irqAsserted(a) { return a } function get_nextEventAt() { return frameClock < 6820 ? (6820 - frameClock) / 3 : (89345 - frameClock) / 341 / 3 } function handleEvent(a) { drawTo(a) } function resetClock(a) { lastcpuClock = a }
var _frameFinished = null; function get_frameFinishHandler() { return _frameFinished } function set_frameFinishHandler(a) { return _frameFinished = a } function get__nmiOccurred() { return (_PPUStatus & 128) === 128 } var _nmiHasBeenThrownThisFrame = !1; function setupVINT() { _PPUStatus |= 128; _nmiHasBeenThrownThisFrame = !1; _frames += 1; _needToDraw = !1; get_nmiIsThrown() && (cpuHandleNMI = !0, set_handleVBlankIRQ(!0), _nmiHasBeenThrownThisFrame = !0) }
function clearVINT() { _PPUStatus = 0; hitSprite = !1; spriteSize = (_PPUControlByte0 & 32) === 32 ? 16 : 8; (_PPUControlByte1 & 24) !== 0 && (_isRendering = !0) } function _runEndOfScanlineRenderEvents() { } function runNewScanlineEvents() { yPosition = currentYPosition + lockedVScroll; yPosition < 0 && (yPosition += 240); yPosition >= 240 ? (yPosition -= 240, yNTXor = 2048) : yNTXor = 0 } function _updateSprites() { } function _updateTiles() { } var _hScroll = 0, _vScroll = 0, lockedHScroll = 0, lockedVScroll = 0; function get_hScroll() { return lockedHScroll }
function get_vScroll() { return lockedVScroll } var spriteChanges = !1, _spriteCopyHasHappened = !1; function get_spriteCopyHasHappened() { return _spriteCopyHasHappened } function set_spriteCopyHasHappened(a) { return _spriteCopyHasHappened = a } var spriteZeroHit = !1, spriteIsForegroundPixel = !1; function get_maxSpritesPerScanline() { return _maxSpritesPerScanline } function set_maxSpritesPerScanline(a) { return _maxSpritesPerScanline = a } function get_spriteRam() { return _spriteRAM }
function copySprites(a, c) { for (var b = 0; b < 256; ++b) { var d = _spriteAddress + b & 255; if (_spriteRAM[d] !== a[c + b]) _spriteRAM[d] = a[c + b], _unpackedSprites[d >> 2].changed = !0 } spriteChanges = _spriteCopyHasHappened = !0 } function initSprites() { for (var a = 0; a < _maxSpritesPerScanline; ++a) currentSprites[a] = new NES.CPU.PPUClasses.NESSprite; for (a = 0; a < 64; ++a) _unpackedSprites[a] = new NES.CPU.PPUClasses.NESSprite }
function getSpritePixel() {
    spriteZeroHit = spriteIsForegroundPixel = !1; for (var a = 0, c = a = 0, b = 0, d = 0; d < _spritesOnThisScanline; ++d) {
        var e = currentSprites[d]; if (e.xPosition > 0 && currentXPosition >= e.xPosition && currentXPosition < e.xPosition + 8) {
            var f = 0; (_PPUControlByte0 & 8) === 8 && (f = 4096); c = currentXPosition - e.xPosition; a = currentYPosition - e.yPosition - 1; a &= spriteSize - 1; b = e.tileIndex; (_PPUControlByte0 & 32) === 32 && ((b & 1) === 1 ? (f = 4096, b ^= 1) : f = 0); a = whissaSpritePixel(f, c, a, e, b); if (a !== 0) return e.spriteNumber === 0 && (spriteZeroHit =
!0), spriteIsForegroundPixel = e.foreground, a | e.attributeByte
        } 
    } return 0
} function whissaSpritePixel(a, c, b, d, e) { var f; d.flipY && (b = spriteSize - b - 1); b >= 8 && (b += 8); f = chrRomHandler.getPPUByte(0, a + e * 16 + b); a = chrRomHandler.getPPUByte(0, a + e * 16 + b + 8); return d.flipX ? f >> c & 1 | a >> c << 1 & 2 : f >> 7 - c & 1 | a >> 7 - c << 1 & 2 } var _spritesOnThisScanline = 0, spriteSize = 0; function get_spritesOnLine() { return _spritesOnLine }
function preloadSprites(a) { _spritesOnThisScanline = 0; sprite0scanline = -1; for (var c = 0; c < 256; c += 4) { var b = (c + _spriteAddress & 255) >> 2, d = _unpackedSprites[b].yPosition + 1; if (a >= d && a < d + spriteSize) { if (b === 0) sprite0scanline = a, sprite0x = _unpackedSprites[b].xPosition; currentSprites[_spritesOnThisScanline] = _unpackedSprites[b]; currentSprites[_spritesOnThisScanline].isVisible = !0; _spritesOnThisScanline++; if (_spritesOnThisScanline === _maxSpritesPerScanline) break } } _spritesOnThisScanline > 7 && (_PPUStatus |= 32) }
function unpackSprites() { for (var a = _unpackedSprites.length, c = 0; c < a; ++c) _unpackedSprites[c].changed && _unpackSprite(c) }
function _unpackSprite(a) { var c = _spriteRAM[a * 4 + 2]; _unpackedSprites[a].isVisible = !0; _unpackedSprites[a].attributeByte = (c & 3) << 2 | 16; _unpackedSprites[a].yPosition = _spriteRAM[a * 4]; _unpackedSprites[a].xPosition = _spriteRAM[a * 4 + 3]; _unpackedSprites[a].spriteNumber = a; _unpackedSprites[a].foreground = (c & 32) !== 32; _unpackedSprites[a].flipX = (c & 64) === 64; _unpackedSprites[a].flipY = (c & 128) === 128; _unpackedSprites[a].tileIndex = _spriteRAM[a * 4 + 1]; _unpackedSprites[a].changed = !1 }
var _patternEntry = 0, _patternEntryByte2 = 0, _currentAttributeByte = 0, _currentTileIndex = 0, xNTXor = 0, yNTXor = 0, _fetchTile = !0, xPosition = 0, yPosition = 0; function getNameTablePixel() { var a = ((_patternEntry & 128) >> 7) + ((_patternEntryByte2 & 128) >> 6); _patternEntry <<= 1; _patternEntryByte2 <<= 1; a > 0 && (a += _currentAttributeByte); return a }
function _fetchNextTile() { var a = _nameTableMemoryStart ^ xNTXor ^ yNTXor, c = xPosition >> 3, b = chrRomHandler.getPPUByte(0, 8192 + a + c + ((yPosition >> 3) % 30 << 5)), b = _backgroundPatternTableIndex + b * 16 + (yPosition & 7); _patternEntry = chrRomHandler.getPPUByte(0, b); _patternEntryByte2 = chrRomHandler.getPPUByte(0, b + 8); _currentAttributeByte = _getAttributeTableEntry(a, c, yPosition >> 3) }
function _getAttributeTableEntry(a, c, b) { a = chrRomHandler.getPPUByte(0, 8192 + a + 960 + (c >> 2) + (b >> 2 << 3)); switch (c & 2 | (b & 2) * 2) { case 0: return a << 2 & 12; case 2: return a & 12; case 4: return a >> 2 & 12; case 6: return a >> 4 & 12 } return 0 } var chrRomHandler = null; function get_chrRomHandler() { return chrRomHandler } function set_chrRomHandler(a) { return chrRomHandler = a }
function writeToNESPalette(a, c) { var b = a & 31; _palette[b] = c; updatePaletteEntry(b, c); (_PPUAddress & 65519) === 16128 && (updatePaletteEntry((b ^ 16) & 31, c), _palette[(b ^ 16) & 31] = c) } function getFrameChecksum() { for (var a = 0, c = ss.IEnumerator.getEnumerator(rgb32OutBuffer); c.moveNext(); ) { var b = c.get_current(); a += b; a &= 268435455 } return a } NES.CPU.PPUClasses.PPUWriteEvent = function () { };
NES.CPU.PPUClasses.PPUWriteEvent.prototype = { _isWrite: !1, get_isWrite: function () { return this._isWrite }, set_isWrite: function (a) { return this._isWrite = a }, _scanlineNum: 0, get_scanlineNum: function () { return this._scanlineNum }, set_scanlineNum: function (a) { return this._scanlineNum = a }, _scanlinePos: 0, get_scanlinePos: function () { return this._scanlinePos }, set_scanlinePos: function (a) { return this._scanlinePos = a }, _frameClock: 0, get_frameClock: function () { return this._frameClock }, set_frameClock: function (a) {
    return this._frameClock =
a
}, _registerAffected: 0, get_registerAffected: function () { return this._registerAffected }, set_registerAffected: function (a) { return this._registerAffected = a }, _dataWritten: 0, get_dataWritten: function () { return this._dataWritten }, set_dataWritten: function (a) { return this._dataWritten = a }, get_text: function () { return this.toString() }, toString: function () { return String.format(" {0:x2} written to {1:x4} at {2}, {3}", this._registerAffected, this._dataWritten, this._scanlineNum, this._scanlinePos) } 
};
_scanlinePreRenderDummyScanline = 20; _scanlineRenderingStartsOn = 21; _scanlineRenderingEndsOn = 260; _scanlineLastRenderedPixel = 255; _scanlineTotalLength = 340; _scanlineEventPPUXIncremented = 3; _scanlineEventPPUXReset = 257; _scanlineEventPPUYIncremented = 251; _vBufferWidth = 256; pal = Array(1024); frameClockEnd = 89342;