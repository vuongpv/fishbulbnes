(function () {
    ss.loader.registerScript("bulbascript", [], function () {
        Type.registerNamespace("NES.CPU.Machine.Carts"); NES.CPU.Machine.Carts.NameTableMirroring = function () { }; NES.CPU.Machine.Carts.NameTableMirroring.prototype = { oneScreen: 0, vertical: 1, horizontal: 2, fourScreen: 3 }; NES.CPU.Machine.Carts.NameTableMirroring.registerEnum("NES.CPU.Machine.Carts.NameTableMirroring", !1); NES.CPU.Machine.Carts.INESCart = function () { }; NES.CPU.Machine.Carts.INESCart.prototype = { getByte: null, setByte: null, get_nmiHandler: null,
            set_nmiHandler: null, get_irqAsserted: null, set_irqAsserted: null, get_nextEventAt: null, handleEvent: null, resetClock: null, loadiNESCart: null, get_whizzler: null, set_whizzler: null, get_CPU: null, set_CPU: null, initializeCart: null, updateScanlineCounter: null, get_chrRom: null, set_chrRom: null, get_chrRamStart: null, get_ppuBankStarts: null, set_ppuBankStarts: null, get_checkSum: null, get_SRAM: null, set_SRAM: null, get_mirroring: null, get_cartName: null, get_numberOfPrgRoms: null, get_numberOfChrRoms: null, get_mapperID: null, getPPUByte: null,
            setPPUByte: null, actualChrRomOffset: null, get_bankSwitchesChanged: null, set_bankSwitchesChanged: null, get_currentBank: null, get_usesSRAM: null, set_usesSRAM: null
        }; NES.CPU.Machine.Carts.INESCart.registerInterface("NES.CPU.Machine.Carts.INESCart"); NES.CPU.Machine.Carts.BaseCart = function () {
            this._iNesHeader = new Int32Array(16); this._romControlBytes = new Int32Array(2); this._currentE = this._currentC = this._currentA = this._current8 = -1; this._prgRomBank6 = new Int32Array(8192); this.mirroring = -1; this.ppuBankStarts = new Int32Array(16);
            this._bankStartCache = new Int32Array(4096); for (var a = 0; a < 16; ++a) this.ppuBankStarts[a] = a * 1024
        }; NES.CPU.Machine.Carts.BaseCart.prototype = { _nesCart: null, _chrRom: null, get_chrRom: function () { return this._chrRom }, set_chrRom: function (a) { return this._chrRom = a }, _sramCanWrite: !1, _sramEnabled: !1, _sramCanSave: !1, _prgRomCount: 0, _chrRomCount: 0, get_chrRomCount: function () { return this._chrRomCount }, get_prgRomCount: function () { return this._prgRomCount }, _mapperId: 0, _bank8start: 0, _bankAstart: 0, _bankCstart: 0, _bankEstart: 0,
            _ROMHashfunction: null, get_romHashFunction: function () { return this._ROMHashfunction }, set_romHashFunction: function (a) { return this._ROMHashfunction = a }, _chrRomOffset: 0, chrRamStart: 0, loadiNESCart: function (a, b, c, d, f, e) {
                this._romControlBytes[0] = a[6]; this._romControlBytes[1] = a[7]; this._mapperId = (this._romControlBytes[0] & 240) >>> 4; this._mapperId += this._romControlBytes[1] & 240; this._chrRomOffset = e; for (e = 0; e < a.length; ++e) this._iNesHeader[e] = a[e]; this._prgRomCount = b; this._chrRomCount = c; this._nesCart = new Int32Array(d.length);
                for (e = 0; e < d.length; ++e) this._nesCart[e] = d[e]; this._chrRomCount === 0 && (f = new Int32Array(32768)); this._chrRom = new Int32Array(f.length + 4096); this.chrRamStart = f.length; for (e = 0; e < f.length; ++e) this._chrRom[e] = f[e]; this._prgRomCount = this._iNesHeader[4]; this._chrRomCount = this._iNesHeader[5]; this._romControlBytes[0] = this._iNesHeader[6]; this._romControlBytes[1] = this._iNesHeader[7]; this._sramCanSave = (this._romControlBytes[0] & 2) === 2; this._sramEnabled = !0; this.set_usesSRAM((this._romControlBytes[0] & 2) === 2); this._mirror(0,
0); (this._romControlBytes[0] & 1) === 1 ? this._mirror(0, 1) : this._mirror(0, 2); (this._romControlBytes[0] & 8) === 8 && this._mirror(0, 3); this.initializeCart()
            }, whizzler: null, get_whizzler: function () { return this.whizzler }, set_whizzler: function (a) { return this.whizzler = a }, irqRaised: !1, get_irqRaised: function () { return this.irqRaised }, set_irqRaised: function (a) { return this.irqRaised = a }, updateScanlineCounter: function () { }, getByte: function (a, b) {
                var c = 0; switch (b & 57344) {
                    case 24576: return this._prgRomBank6[b & 8191]; case 32768: c =
this._bank8start; break; case 40960: c = this._bankAstart; break; case 49152: c = this._bankCstart; break; case 57344: c = this._bankEstart
                } if (c + (b & 8191) > this._nesCart.length) throw Error("THis is broken!"); return this._nesCart[c + (b & 8191)]
            }, _setupBankStarts: function (a, b, c, d) {
                a = this._maskBankAddress(a); b = this._maskBankAddress(b); c = this._maskBankAddress(c); d = this._maskBankAddress(d); this._current8 = a; this._currentA = b; this._currentC = c; this._currentE = d; this._bank8start = a * 8192; this._bankAstart = b * 8192; this._bankCstart =
c * 8192; this._bankEstart = d * 8192
            }, _maskBankAddress: function (a) { if (a >= this._prgRomCount * 2) { for (var b = 255; (a & b) >= this._prgRomCount * 2; ) b >>= 1; return a & b } else return a }, _checkSum: null, get_checkSum: function () { return this._checkSum }, get_CPU: function () { throw Error("CPU Not Implemented"); }, set_CPU: function () { throw Error("CPU Not Implemented"); }, get_SRAM: function () { return this._prgRomBank6 }, set_SRAM: function (a) { if (a != null && a.length === this._prgRomBank6.length) this._prgRomBank6 = a; return a }, _cartName: null, get_cartName: function () { return this._cartName },
            set_cartName: function (a) { return this._cartName = a }, get_numberOfPrgRoms: function () { return this._prgRomCount }, get_numberOfChrRoms: function () { return this._chrRomCount }, get_mapperID: function () { return this._mapperId }, get_mirroring: function () { return this.mirroring }, _updateIRQ: null, get_nmiHandler: function () { return this._updateIRQ }, set_nmiHandler: function (a) { return this._updateIRQ = a }, get_irqAsserted: function () { return !1 }, set_irqAsserted: function (a) { return a }, get_nextEventAt: function () { return -1 }, handleEvent: function () { },
            resetClock: function () { }, get_ppuBankStarts: function () { return this.ppuBankStarts }, set_ppuBankStarts: function (a) { return this.ppuBankStarts = a }, get_bankStartCache: function () { return this._bankStartCache }, _currentBank: 0, get_currentBank: function () { return this._currentBank }, bankSwitchesChanged: !1, get_bankSwitchesChanged: function () { return this.bankSwitchesChanged }, set_bankSwitchesChanged: function (a) { return this.bankSwitchesChanged = a }, getPPUByte: function (a, b) {
                return this._chrRom[this.ppuBankStarts[b >> 10] + (b &
1023)]
            }, actualChrRomOffset: function (a) { return this.ppuBankStarts[a >> 10] + (a & 1023) }, setPPUByte: function (a, b, c) { this._chrRom[this.ppuBankStarts[b >> 10] + (b & 1023)] = c }, _oneScreenOffset: 0, get__oneScreenOffset: function () { return this._oneScreenOffset }, set__oneScreenOffset: function (a) { return this._oneScreenOffset = a }, _mirror: function (a, b) {
                this.mirroring = b; a > -1 && drawTo(a); switch (b) {
                    case 0: this.ppuBankStarts[8] = this.chrRamStart + 0 + this._oneScreenOffset; this.ppuBankStarts[9] = this.chrRamStart + 0 + this._oneScreenOffset;
                        this.ppuBankStarts[10] = this.chrRamStart + 0 + this._oneScreenOffset; this.ppuBankStarts[11] = this.chrRamStart + 0 + this._oneScreenOffset; break; case 1: this.ppuBankStarts[8] = this.chrRamStart + 0; this.ppuBankStarts[9] = this.chrRamStart + 1024; this.ppuBankStarts[10] = this.chrRamStart + 0; this.ppuBankStarts[11] = this.chrRamStart + 1024; break; case 2: this.ppuBankStarts[8] = this.chrRamStart + 0; this.ppuBankStarts[9] = this.chrRamStart + 0; this.ppuBankStarts[10] = this.chrRamStart + 1024; this.ppuBankStarts[11] = this.chrRamStart + 1024; break;
                    case 3: this.ppuBankStarts[8] = this.chrRamStart + 0, this.ppuBankStarts[9] = this.chrRamStart + 1024, this.ppuBankStarts[10] = this.chrRamStart + 2048, this.ppuBankStarts[11] = this.chrRamStart + 3072
                } updatePixelInfo()
            }, _usesSRAM: !1, get_usesSRAM: function () { return this._usesSRAM }, set_usesSRAM: function (a) { return this._usesSRAM = a }, get_chrRamStart: function () { return this.chrRamStart }, get_ppuBankStarts: function () { return this.ppuBankStarts }, set_ppuBankStarts: function () { throw Error("CPU Not Implemented"); } 
        }; Type.registerNamespace("NES.CPU.Machine.ROMLoader");
        NES.CPU.Machine.ROMLoader.ByteArrayHolder = function () { }; NES.CPU.Machine.ROMLoader.ByteArrayHolder.prototype = { _position: 0, get_position: function () { return this._position }, set_position: function (a) { return this._position = a }, _data: null, get_data: function () { return this._data }, set_data: function (a) { return this._data = a }, read: function (a, b, c) { for (var d = 0, f = b; f < b + c; ++f) { if (this._position >= this._data.length) break; a[f] = this._data[this._position]; this._position++; d++ } return d } }; NES.CPU.Machine.ROMLoader.iNESFileHandler =
function () { }; NES.CPU.Machine.ROMLoader.iNESFileHandler.loadROM = function (a, b) { var c = null, d = new Int32Array(16); b.read(d, 0, 16); var f = d[6] & 240; f /= 16; f += d[7]; var e = d[4], i = d[5], g = new Int32Array(e * 16384), h = new Int32Array(i * 16384), j = 0; b.read(g, 0, g.length); j = b.get_position(); b.read(h, 0, h.length); switch (f) { case 0: case 2: case 3: case 7: c = new NES.CPU.NESCart } c != null && (c.set_whizzler(a), set_chrRomHandler(c), c.loadiNESCart(d, e, i, g, h, j)); return c }; Type.registerNamespace("NES.CPU"); NES.CPU.NESCart = function () {
    this._prgRomBank6$1 =
new Int32Array(2048); this._prevBSSrc$1 = new Int32Array(8); NES.CPU.NESCart.initializeBase(this)
}; NES.CPU.NESCart.prototype = { initializeCart: function () {
    for (var a = 0; a < 8; ++a) this._prevBSSrc$1[a] = -1; switch (this._mapperId) {
        case 0: case 1: case 2: case 3: this.get_chrRomCount() > 0 && this._copyBanks$1(0, 0, 0, 1); this._setupBankStarts(0, 1, this.get_prgRomCount() * 2 - 2, this.get_prgRomCount() * 2 - 1); break; case 7: this._setupBankStarts(0, 1, 2, 3); this._mirror(0, 0); break; default: throw Error("Mapper " + this._mapperId.toString() +
" not implemented.");
    } 
}, _copyBanks$1: function (a, b, c, d) { b >= this.get_chrRomCount() && (b = this.get_chrRomCount() - 1); a = c * 8; b *= 8; for (c = 0; c < d * 8; ++c) this.ppuBankStarts[b + c] = (a + c) * 1024 }, setByte: function (a, b, c) {
    if (b >= 24576 && b <= 32767) this._sramEnabled && (this._prgRomBank6$1[b & 8191] = c); else {
        if (this._mapperId === 7) { var d = 0, d = 4 * (c & 15); this._setupBankStarts(d, d + 1, d + 2, d + 3); (c & 16) === 16 ? this.set__oneScreenOffset(1024) : this.set__oneScreenOffset(0); this._mirror(a, 0) } this._mapperId === 3 && b >= 32768 && this._copyBanks$1(a, 0, c,
1); this._mapperId === 2 && b >= 32768 && (d = c * 2, this._setupBankStarts(d, d + 1, this._currentC, this._currentE))
    } 
} 
}; Type.registerNamespace("NES.CPU.Fastendo"); NES.CPU.Fastendo.AddressingModes = function () { }; NES.CPU.Fastendo.AddressingModes.prototype = { bullshit: 0, implicit: 1, accumulator: 2, immediate: 3, zeroPage: 4, zeroPageX: 5, zeroPageY: 6, relative: 7, absolute: 8, absoluteX: 9, absoluteY: 10, indirect: 11, indexedIndirect: 12, indirectIndexed: 13, indirectZeroPage: 14, indirectAbsoluteX: 15 }; NES.CPU.Fastendo.AddressingModes.registerEnum("NES.CPU.Fastendo.AddressingModes",
!1); NES.CPU.Fastendo.CPUStatusBits = function () { }; NES.CPU.Fastendo.CPUStatusBits.prototype = { carry: 0, zeroResult: 1, interruptDisable: 2, decimalMode: 3, breakCommand: 4, expansion: 5, overflow: 6, negativeResult: 7 }; NES.CPU.Fastendo.CPUStatusBits.registerEnum("NES.CPU.Fastendo.CPUStatusBits", !1); NES.CPU.Fastendo.CPUStatusMasks = function () { }; NES.CPU.Fastendo.CPUStatusMasks.prototype = { carryMask: 1, zeroResultMask: 2, interruptDisableMask: 4, decimalModeMask: 8, breakCommandMask: 16, expansionMask: 32, overflowMask: 64, negativeResultMask: 128 };
        NES.CPU.Fastendo.CPUStatusMasks.registerEnum("NES.CPU.Fastendo.CPUStatusMasks", !1); NES.CPU.Fastendo.IMemoryMappedIOElement = function () { }; NES.CPU.Fastendo.IMemoryMappedIOElement.prototype = { getByte: null, setByte: null }; NES.CPU.Fastendo.IMemoryMappedIOElement.registerInterface("NES.CPU.Fastendo.IMemoryMappedIOElement"); NES.CPU.Fastendo.IClockedMemoryMappedIOElement = function () { }; NES.CPU.Fastendo.IClockedMemoryMappedIOElement.prototype = { getByte: null, setByte: null, get_nmiHandler: null, set_nmiHandler: null, get_irqAsserted: null,
            set_irqAsserted: null, get_nextEventAt: null, handleEvent: null, resetClock: null
        }; NES.CPU.Fastendo.IClockedMemoryMappedIOElement.registerInterface("NES.CPU.Fastendo.IClockedMemoryMappedIOElement"); NES.CPU.Fastendo.CPU2A03 = function () {
            this._nextEvent = -1; this._clockcount = new Int32Array(256); this._instruction = new Int32Array(256); this.addressmode = new Int32Array(256); this._rams = new Int32Array(8192); this._instructionUsage = new Int32Array(256); this._instructionHistory = new Int32Array(256); this._nmiHandler = ss.Delegate.create(this,
this._nmiHandler); this._irqUpdater = ss.Delegate.create(this, this._irqUpdater); this.setupticks()
        }; NES.CPU.Fastendo.CPU2A03.prototype = { _ticks: 0, _operationCounter: 0, _accumulator: 0, _indexRegisterX: 0, _indexRegisterY: 0, get_accumulator: function () { return this._accumulator }, set_accumulator: function (a) { return this._accumulator = a }, get_indexRegisterY: function () { return this._indexRegisterY }, set_indexRegisterY: function (a) { return this._indexRegisterY = a }, get_indexRegisterX: function () { return this._indexRegisterX },
            set_indexRegisterX: function (a) { return this._indexRegisterX = a }, _programCounter: 0, get_programCounter: function () { return this._programCounter }, set_programCounter: function (a) { return this._programCounter = a }, _statusRegister: 0, get_statusRegister: function () { return this._statusRegister }, set_statusRegister: function (a) { return this._statusRegister = a }, get_addressCodePage: function () { return this.get_addressBus() >> 8 }, get_addressLowByte: function () { return this.get_addressBus() & 255 }, _addressBus: 0, get_addressBus: function () { return this._addressBus },
            set_addressBus: function (a) { return this._addressBus = a }, _dataBus: 0, get_dataBus: function () { return this._dataBus }, set_dataBus: function (a) { return this._dataBus = a }, _getSRMask: function (a) {
                switch (a) {
                    case NES.CPU.Fastendo.CPUStatusBits.carry: return 1; case NES.CPU.Fastendo.CPUStatusBits.zeroResult: return 2; case NES.CPU.Fastendo.CPUStatusBits.interruptDisable: return 4; case NES.CPU.Fastendo.CPUStatusBits.decimalMode: return 8; case NES.CPU.Fastendo.CPUStatusBits.breakCommand: return 16; case NES.CPU.Fastendo.CPUStatusBits.expansion: return 32;
                    case NES.CPU.Fastendo.CPUStatusBits.overflow: return 64; case NES.CPU.Fastendo.CPUStatusBits.negativeResult: return 128
                } return 0
            }, setFlag: function (a, b) { this._statusRegister = b ? this._statusRegister | a : this._statusRegister & ~a; this._statusRegister |= NES.CPU.Fastendo.CPUStatusMasks.expansionMask }, getFlag: function (a) { return (this._statusRegister & a) === a }, interruptRequest: function () {
                this.getFlag(NES.CPU.Fastendo.CPUStatusMasks.interruptDisableMask) || (this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.interruptDisableMask,
!0), this.pushStack(this.get_programCounter() / 256), this.pushStack(this.get_programCounter()), this.pushStack(this.get_statusRegister()), this.set_programCounter(this.getByte(65534) + (this.getByte(65535) << 8)))
            }, _memoryLock: !1, get_memoryLock: function () { return this._memoryLock }, set_memoryLock: function (a) { return this._memoryLock = a }, nonMaskableInterrupt: function () {
                var a = this._statusRegister & -17 | 32; this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.interruptDisableMask, !0); this.pushStack(this._programCounter >> 8);
                this.pushStack(this._programCounter & 255); this.pushStack(a); var a = this.getByte(65530), b = this.getByte(65531); this.set_programCounter(a | b << 8)
            }, _reset: !1, get_reset: function () { return this._reset }, set_reset: function (a) { (this._reset = a) && this.resetCPU(); return a }, curinst_AddressingMode: 0, curinst_Address: 0, curinst_OpCode: 0, curinst_Parameters0: 0, curinst_Parameters1: 0, curinst_ExtraTiming: 0, curinst_Length: 0, get_operationCounter: function () { return this._operationCounter }, _clock: 0, get_clock: function () { return this._clock },
            set_clock: function (a) { return this._clock = a }, _handleNMI: !1, _handleIRQ: !1, _runningHard: !1, get_runningHard: function () { return this._runningHard }, set_runningHard: function (a) { return this._runningHard = a }, checkEvent: function () { this._nextEvent === -1 && this.findNextEvent() }, runFast: function () { for (; this._clock < 29780; ) this.step() }, step: function () {
                this.curinst_ExtraTiming = 0; this._nextEvent <= this._clock && this._handleNextEvent(); if (this._handleNMI) this._handleNMI = !1, this._clock += 7, this.nonMaskableInterrupt(); else if (this._handleIRQ) this._handleIRQ =
!1, this._clock += 7, this.interruptRequest(); this.curinst_Address = this._programCounter; this.curinst_OpCode = this.getByte(this._programCounter++); this.curinst_AddressingMode = this.addressmode[this.curinst_OpCode]; switch (this.curinst_AddressingMode) {
                    case NES.CPU.Fastendo.AddressingModes.absolute: case NES.CPU.Fastendo.AddressingModes.absoluteX: case NES.CPU.Fastendo.AddressingModes.absoluteY: case NES.CPU.Fastendo.AddressingModes.indirect: this.curinst_Parameters0 = this.getByte(this._programCounter++); this.curinst_Parameters1 =
this.getByte(this._programCounter++); break; case NES.CPU.Fastendo.AddressingModes.zeroPage: case NES.CPU.Fastendo.AddressingModes.zeroPageX: case NES.CPU.Fastendo.AddressingModes.zeroPageY: case NES.CPU.Fastendo.AddressingModes.relative: case NES.CPU.Fastendo.AddressingModes.indexedIndirect: case NES.CPU.Fastendo.AddressingModes.indirectIndexed: case NES.CPU.Fastendo.AddressingModes.indirectZeroPage: case NES.CPU.Fastendo.AddressingModes.immediate: this.curinst_Parameters0 = this.getByte(this._programCounter++)
                } this.execute();
                this._clock += NES.CPU.Fastendo.CPU2A03._cpuTiming[this.curinst_OpCode] + this.curinst_ExtraTiming
            }, runCycles: function (a) { for (var b = this._ticks; this._ticks - b < a; ) this.step() }, get_ticks: function () { return this._ticks }, set_ticks: function (a) { return this._ticks = a }, setupticks: function () {
                this._clockcount[0] = 7; this.addressmode[0] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[1] = 6; this.addressmode[1] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[2] = 2; this.addressmode[2] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[3] = 2; this.addressmode[3] = NES.CPU.Fastendo.AddressingModes.bullshit; this._clockcount[4] = 3; this.addressmode[4] = NES.CPU.Fastendo.AddressingModes.bullshit; this._clockcount[5] = 3; this.addressmode[5] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[6] = 5; this.addressmode[6] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[7] = 2; this.addressmode[7] = NES.CPU.Fastendo.AddressingModes.bullshit; this._clockcount[8] = 3; this.addressmode[8] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[9] = 3; this.addressmode[9] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[10] = 2; this.addressmode[10] = NES.CPU.Fastendo.AddressingModes.accumulator; this._clockcount[11] = 2; this.addressmode[11] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[12] = 4; this.addressmode[12] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[13] = 4; this.addressmode[13] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[14] = 6; this.addressmode[14] = NES.CPU.Fastendo.AddressingModes.absolute;
                this._clockcount[15] = 2; this.addressmode[15] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[16] = 2; this.addressmode[16] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[17] = 5; this.addressmode[17] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[18] = 3; this.addressmode[18] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage; this._clockcount[19] = 2; this.addressmode[19] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[20] = 3; this.addressmode[20] = NES.CPU.Fastendo.AddressingModes.zeroPage;
                this._clockcount[21] = 4; this.addressmode[21] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[22] = 6; this.addressmode[22] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[23] = 2; this.addressmode[23] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[24] = 2; this.addressmode[24] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[25] = 4; this.addressmode[25] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[26] = 2; this.addressmode[26] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[27] = 2; this.addressmode[27] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[28] = 4; this.addressmode[28] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[29] = 4; this.addressmode[29] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[30] = 7; this.addressmode[30] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[31] = 2; this.addressmode[31] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[32] = 6; this.addressmode[32] = NES.CPU.Fastendo.AddressingModes.absolute;
                this._clockcount[33] = 6; this.addressmode[33] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[34] = 2; this.addressmode[34] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[35] = 2; this.addressmode[35] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[36] = 3; this.addressmode[36] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[37] = 3; this.addressmode[37] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[38] = 5; this.addressmode[38] = NES.CPU.Fastendo.AddressingModes.zeroPage;
                this._clockcount[39] = 2; this.addressmode[39] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[40] = 4; this.addressmode[40] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[41] = 3; this.addressmode[41] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[42] = 2; this.addressmode[42] = NES.CPU.Fastendo.AddressingModes.accumulator; this._clockcount[43] = 2; this.addressmode[43] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[44] = 4; this.addressmode[44] = NES.CPU.Fastendo.AddressingModes.absolute;
                this._clockcount[45] = 4; this.addressmode[45] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[46] = 6; this.addressmode[46] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[47] = 2; this.addressmode[47] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[48] = 2; this.addressmode[48] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[49] = 5; this.addressmode[49] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[50] = 3; this.addressmode[50] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage;
                this._clockcount[51] = 2; this.addressmode[51] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[52] = 4; this.addressmode[52] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[53] = 4; this.addressmode[53] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[54] = 6; this.addressmode[54] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[55] = 2; this.addressmode[55] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[56] = 2; this.addressmode[56] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[57] = 4; this.addressmode[57] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[58] = 2; this.addressmode[58] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[59] = 2; this.addressmode[59] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[60] = 4; this.addressmode[60] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[61] = 4; this.addressmode[61] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[62] = 7; this.addressmode[62] = NES.CPU.Fastendo.AddressingModes.absoluteX;
                this._clockcount[63] = 2; this.addressmode[63] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[64] = 6; this.addressmode[64] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[65] = 6; this.addressmode[65] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[66] = 2; this.addressmode[66] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[67] = 2; this.addressmode[67] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[68] = 2; this.addressmode[68] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[69] = 3; this.addressmode[69] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[70] = 5; this.addressmode[70] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[71] = 2; this.addressmode[71] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[72] = 3; this.addressmode[72] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[73] = 3; this.addressmode[73] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[74] = 2; this.addressmode[74] = NES.CPU.Fastendo.AddressingModes.accumulator;
                this._clockcount[75] = 2; this.addressmode[75] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[76] = 3; this.addressmode[76] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[77] = 4; this.addressmode[77] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[78] = 6; this.addressmode[78] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[79] = 2; this.addressmode[79] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[80] = 2; this.addressmode[80] = NES.CPU.Fastendo.AddressingModes.relative;
                this._clockcount[81] = 5; this.addressmode[81] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[82] = 3; this.addressmode[82] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage; this._clockcount[83] = 2; this.addressmode[83] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[84] = 2; this.addressmode[84] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[85] = 4; this.addressmode[85] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[86] = 6; this.addressmode[86] = NES.CPU.Fastendo.AddressingModes.zeroPageX;
                this._clockcount[87] = 2; this.addressmode[87] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[88] = 2; this.addressmode[88] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[89] = 4; this.addressmode[89] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[90] = 3; this.addressmode[90] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[91] = 2; this.addressmode[91] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[92] = 2; this.addressmode[92] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[93] = 4; this.addressmode[93] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[94] = 7; this.addressmode[94] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[95] = 2; this.addressmode[95] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[96] = 6; this.addressmode[96] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[97] = 6; this.addressmode[97] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[98] = 2; this.addressmode[98] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[99] = 2; this.addressmode[99] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[100] = 3; this.addressmode[100] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[101] = 3; this.addressmode[101] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[102] = 5; this.addressmode[102] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[103] = 2; this.addressmode[103] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[104] = 4; this.addressmode[104] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[105] = 3; this.addressmode[105] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[106] = 2; this.addressmode[106] = NES.CPU.Fastendo.AddressingModes.accumulator; this._clockcount[107] = 2; this.addressmode[107] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[108] = 5; this.addressmode[108] = NES.CPU.Fastendo.AddressingModes.indirect; this._clockcount[109] = 4; this.addressmode[109] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[110] = 6; this.addressmode[110] = NES.CPU.Fastendo.AddressingModes.absolute;
                this._clockcount[111] = 2; this.addressmode[111] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[112] = 2; this.addressmode[112] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[113] = 5; this.addressmode[113] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[114] = 3; this.addressmode[114] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage; this._clockcount[115] = 2; this.addressmode[115] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[116] = 4; this.addressmode[116] =
NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[117] = 4; this.addressmode[117] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[118] = 6; this.addressmode[118] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[119] = 2; this.addressmode[119] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[120] = 2; this.addressmode[120] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[121] = 4; this.addressmode[121] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[122] =
4; this.addressmode[122] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[123] = 2; this.addressmode[123] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[124] = 6; this.addressmode[124] = NES.CPU.Fastendo.AddressingModes.indirectAbsoluteX; this._clockcount[125] = 4; this.addressmode[125] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[126] = 7; this.addressmode[126] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[127] = 2; this.addressmode[127] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[128] = 2; this.addressmode[128] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[129] = 6; this.addressmode[129] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[130] = 2; this.addressmode[130] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[131] = 2; this.addressmode[131] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[132] = 2; this.addressmode[132] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[133] = 2; this.addressmode[133] = NES.CPU.Fastendo.AddressingModes.zeroPage;
                this._clockcount[134] = 2; this.addressmode[134] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[135] = 2; this.addressmode[135] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[136] = 2; this.addressmode[136] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[137] = 2; this.addressmode[137] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[138] = 2; this.addressmode[138] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[139] = 2; this.addressmode[139] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[140] = 4; this.addressmode[140] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[141] = 4; this.addressmode[141] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[142] = 4; this.addressmode[142] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[143] = 2; this.addressmode[143] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[144] = 2; this.addressmode[144] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[145] = 6; this.addressmode[145] = NES.CPU.Fastendo.AddressingModes.indirectIndexed;
                this._clockcount[146] = 3; this.addressmode[146] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage; this._clockcount[147] = 2; this.addressmode[147] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[148] = 4; this.addressmode[148] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[149] = 4; this.addressmode[149] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[150] = 4; this.addressmode[150] = NES.CPU.Fastendo.AddressingModes.zeroPageY; this._clockcount[151] = 2; this.addressmode[151] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[152] = 2; this.addressmode[152] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[153] = 5; this.addressmode[153] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[154] = 2; this.addressmode[154] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[155] = 2; this.addressmode[155] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[156] = 4; this.addressmode[156] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[157] = 5; this.addressmode[157] = NES.CPU.Fastendo.AddressingModes.absoluteX;
                this._clockcount[158] = 5; this.addressmode[158] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[159] = 2; this.addressmode[159] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[160] = 3; this.addressmode[160] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[161] = 6; this.addressmode[161] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[162] = 3; this.addressmode[162] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[163] = 2; this.addressmode[163] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[164] = 3; this.addressmode[164] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[165] = 3; this.addressmode[165] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[166] = 3; this.addressmode[166] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[167] = 2; this.addressmode[167] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[168] = 2; this.addressmode[168] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[169] = 3; this.addressmode[169] = NES.CPU.Fastendo.AddressingModes.immediate;
                this._clockcount[170] = 2; this.addressmode[170] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[171] = 2; this.addressmode[171] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[172] = 4; this.addressmode[172] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[173] = 4; this.addressmode[173] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[174] = 4; this.addressmode[174] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[175] = 2; this.addressmode[175] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[176] = 2; this.addressmode[176] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[177] = 5; this.addressmode[177] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[178] = 3; this.addressmode[178] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage; this._clockcount[179] = 2; this.addressmode[179] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[180] = 4; this.addressmode[180] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[181] = 4; this.addressmode[181] =
NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[182] = 4; this.addressmode[182] = NES.CPU.Fastendo.AddressingModes.zeroPageY; this._clockcount[183] = 2; this.addressmode[183] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[184] = 2; this.addressmode[184] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[185] = 4; this.addressmode[185] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[186] = 2; this.addressmode[186] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[187] =
2; this.addressmode[187] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[188] = 4; this.addressmode[188] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[189] = 4; this.addressmode[189] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[190] = 4; this.addressmode[190] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[191] = 2; this.addressmode[191] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[192] = 3; this.addressmode[192] = NES.CPU.Fastendo.AddressingModes.immediate;
                this._clockcount[193] = 6; this.addressmode[193] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[194] = 2; this.addressmode[194] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[195] = 2; this.addressmode[195] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[196] = 3; this.addressmode[196] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[197] = 3; this.addressmode[197] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[198] = 5; this.addressmode[198] = NES.CPU.Fastendo.AddressingModes.zeroPage;
                this._clockcount[199] = 2; this.addressmode[199] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[200] = 2; this.addressmode[200] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[201] = 3; this.addressmode[201] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[202] = 2; this.addressmode[202] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[203] = 2; this.addressmode[203] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[204] = 4; this.addressmode[204] = NES.CPU.Fastendo.AddressingModes.absolute;
                this._clockcount[205] = 4; this.addressmode[205] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[206] = 6; this.addressmode[206] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[207] = 2; this.addressmode[207] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[208] = 2; this.addressmode[208] = NES.CPU.Fastendo.AddressingModes.relative; this._clockcount[209] = 5; this.addressmode[209] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[210] = 3; this.addressmode[210] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage;
                this._clockcount[211] = 2; this.addressmode[211] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[212] = 2; this.addressmode[212] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[213] = 4; this.addressmode[213] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[214] = 6; this.addressmode[214] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[215] = 2; this.addressmode[215] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[216] = 2; this.addressmode[216] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[217] = 4; this.addressmode[217] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[218] = 3; this.addressmode[218] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[219] = 2; this.addressmode[219] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[220] = 2; this.addressmode[220] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[221] = 4; this.addressmode[221] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[222] = 7; this.addressmode[222] = NES.CPU.Fastendo.AddressingModes.absoluteX;
                this._clockcount[223] = 2; this.addressmode[223] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[224] = 3; this.addressmode[224] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[225] = 6; this.addressmode[225] = NES.CPU.Fastendo.AddressingModes.indexedIndirect; this._clockcount[226] = 2; this.addressmode[226] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[227] = 2; this.addressmode[227] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[228] = 3; this.addressmode[228] = NES.CPU.Fastendo.AddressingModes.zeroPage;
                this._clockcount[229] = 3; this.addressmode[229] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[230] = 5; this.addressmode[230] = NES.CPU.Fastendo.AddressingModes.zeroPage; this._clockcount[231] = 2; this.addressmode[231] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[232] = 2; this.addressmode[232] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[233] = 3; this.addressmode[233] = NES.CPU.Fastendo.AddressingModes.immediate; this._clockcount[234] = 2; this.addressmode[234] = NES.CPU.Fastendo.AddressingModes.implicit;
                this._clockcount[235] = 2; this.addressmode[235] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[236] = 4; this.addressmode[236] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[237] = 4; this.addressmode[237] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[238] = 6; this.addressmode[238] = NES.CPU.Fastendo.AddressingModes.absolute; this._clockcount[239] = 2; this.addressmode[239] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[240] = 2; this.addressmode[240] = NES.CPU.Fastendo.AddressingModes.relative;
                this._clockcount[241] = 5; this.addressmode[241] = NES.CPU.Fastendo.AddressingModes.indirectIndexed; this._clockcount[242] = 3; this.addressmode[242] = NES.CPU.Fastendo.AddressingModes.indirectZeroPage; this._clockcount[243] = 2; this.addressmode[243] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[244] = 2; this.addressmode[244] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[245] = 4; this.addressmode[245] = NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[246] = 6; this.addressmode[246] =
NES.CPU.Fastendo.AddressingModes.zeroPageX; this._clockcount[247] = 2; this.addressmode[247] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[248] = 2; this.addressmode[248] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[249] = 4; this.addressmode[249] = NES.CPU.Fastendo.AddressingModes.absoluteY; this._clockcount[250] = 4; this.addressmode[250] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[251] = 2; this.addressmode[251] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[252] =
2; this.addressmode[252] = NES.CPU.Fastendo.AddressingModes.implicit; this._clockcount[253] = 4; this.addressmode[253] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[254] = 7; this.addressmode[254] = NES.CPU.Fastendo.AddressingModes.absoluteX; this._clockcount[255] = 2; this.addressmode[255] = NES.CPU.Fastendo.AddressingModes.implicit
            }, resetCPU: function () {
                this._statusRegister = 52; this._operationCounter = 0; this._stackPointer = 253; this.setupticks(); this.set_ticks(0); this.set_programCounter(this.getByte(65532) +
this.getByte(65533) * 256)
            }, powerOn: function () { this._statusRegister = 52; this._stackPointer = 253; this._operationCounter = 0; this.setupticks(); this.set_ticks(0); for (var a = 0; a < 2048; ++a) this._rams[a] = 255; this._rams[8] = 247; this._rams[9] = 239; this._rams[10] = 223; this._rams[15] = 191; this.set_programCounter(this.getByte(65532) + this.getByte(65533) * 256) }, _lowByte: 0, _highByte: 0, _decodeAddress: function () {
                var a = this.curinst_ExtraTiming = 0; switch (this.curinst_AddressingMode) {
                    case NES.CPU.Fastendo.AddressingModes.absolute: a =
this.curinst_Parameters1 << 8 | this.curinst_Parameters0; break; case NES.CPU.Fastendo.AddressingModes.absoluteX: a = (this.curinst_Parameters1 << 8 | this.curinst_Parameters0) + this._indexRegisterX; if ((a & 255) < this._indexRegisterX) this.curinst_ExtraTiming = 1; break; case NES.CPU.Fastendo.AddressingModes.absoluteY: a = (this.curinst_Parameters1 << 8 | this.curinst_Parameters0) + this._indexRegisterY; if ((a & 255) < this._indexRegisterY) this.curinst_ExtraTiming = 1; break; case NES.CPU.Fastendo.AddressingModes.zeroPage: a = this.curinst_Parameters0 &
255; break; case NES.CPU.Fastendo.AddressingModes.zeroPageX: a = this.curinst_Parameters0 + this._indexRegisterX & 255; break; case NES.CPU.Fastendo.AddressingModes.zeroPageY: a = this.curinst_Parameters0 + this._indexRegisterY & 255; break; case NES.CPU.Fastendo.AddressingModes.indirect: this._lowByte = this.curinst_Parameters0; this._highByte = this.curinst_Parameters1 << 8; var a = (this._highByte | this._lowByte) & 65535, b = this.getByte(a); this._lowByte = this._lowByte + 1 & 255; a = (this._highByte | this._lowByte) & 65535; b |= this.getByte(a) <<
8; a = b; break; case NES.CPU.Fastendo.AddressingModes.indexedIndirect: a = this.curinst_Parameters0 + this._indexRegisterX & 255; this._lowByte = this.getByte(a); a += 1; this._highByte = this.getByte(a & 255); this._highByte <<= 8; a = this._highByte | this._lowByte; break; case NES.CPU.Fastendo.AddressingModes.indirectIndexed: this._lowByte = this.getByte(this.curinst_Parameters0); this._highByte = this.getByte(this.curinst_Parameters0 + 1 & 255) << 8; a = this._lowByte | this._highByte; a += this._indexRegisterY; if ((a & 255) > this._indexRegisterY) this.curinst_ExtraTiming =
1; break; case NES.CPU.Fastendo.AddressingModes.relative: a = this._programCounter + this.curinst_Parameters0; break; default: throw Error("Executors.DecodeAddress() recieved an invalid addressmode");
                } return a
            }, _decodeOperand: function () {
                switch (this.curinst_AddressingMode) {
                    case NES.CPU.Fastendo.AddressingModes.immediate: return this.set_dataBus(this.curinst_Parameters0), this.curinst_Parameters0; case NES.CPU.Fastendo.AddressingModes.accumulator: return this._accumulator; default: return this.set_dataBus(this.getByte(this._decodeAddress())),
this.get_dataBus()
                } 
            }, _storeOperand: function () { }, execute: function () {
                switch (this.curinst_OpCode) {
                    case 105: case 101: case 117: case 109: case 125: case 121: case 97: case 113: this.ADC(); break; case 41: case 37: case 53: case 45: case 61: case 57: case 33: case 49: this.AND(); break; case 10: case 6: case 22: case 14: case 30: this.ASL(); break; case 144: this.BCC(); break; case 176: this.BCS(); break; case 240: this.BEQ(); break; case 36: case 44: this.BIT(); break; case 48: this.BMI(); break; case 208: this.BNE(); break; case 16: this.BPL();
                        break; case 0: this.BRK(); break; case 80: this.BVC(); break; case 112: this.BVS(); break; case 24: this.CLC(); break; case 216: this.CLD(); break; case 88: this.CLI(); break; case 184: this.CLV(); break; case 201: case 197: case 213: case 205: case 221: case 217: case 193: case 209: this.CMP(); break; case 224: case 228: case 236: this.CPX(); break; case 192: case 196: case 204: this.CPY(); break; case 198: case 214: case 206: case 222: this.DEC(); break; case 202: this.DEX(); break; case 136: this.DEY(); break; case 73: case 69: case 85: case 77: case 93: case 89: case 65: case 81: this.EOR();
                        break; case 230: case 246: case 238: case 254: this.INC(); break; case 232: this.INX(); break; case 200: this.INY(); break; case 76: case 108: this.JMP(); break; case 32: this.JSR(); break; case 169: case 165: case 181: case 173: case 189: case 185: case 161: case 177: this.LDA(); break; case 162: case 166: case 182: case 174: case 190: this.LDX(); break; case 160: case 164: case 180: case 172: case 188: this.LDY(); break; case 74: case 70: case 86: case 78: case 94: this.LSR(); break; case 234: case 26: case 58: case 90: case 122: case 218: case 250: case 4: case 20: case 52: case 68: case 100: case 128: case 130: case 137: case 194: case 212: case 226: case 244: case 12: case 28: case 60: case 92: case 124: case 220: case 252: this.NOP();
                        break; case 9: case 5: case 21: case 13: case 29: case 25: case 1: case 17: this.ORA(); break; case 72: this.PHA(); break; case 8: this.PHP(); break; case 104: this.PLA(); break; case 40: this.PLP(); break; case 42: case 38: case 54: case 46: case 62: this.ROL(); break; case 106: case 102: case 118: case 110: case 126: this.ROR(); break; case 64: this.RTI(); break; case 96: this.RTS(); break; case 233: case 229: case 245: case 237: case 253: case 249: case 225: case 241: this.SBC(); break; case 56: this.SEC(); break; case 248: this.SED(); break; case 120: this.SEI();
                        break; case 133: case 149: case 141: case 157: case 153: case 129: case 145: this.STA(); break; case 134: case 150: case 142: this.STX(); break; case 132: case 148: case 140: this.STY(); break; case 170: this.TAX(); break; case 168: this.TAY(); break; case 186: this.TSX(); break; case 138: this.TXA(); break; case 154: this.TXS(); break; case 152: this.TYA()
                } 
            }, _setZNFlags: function (a) {
                (a & 255) === 0 ? this._statusRegister |= NES.CPU.Fastendo.CPUStatusMasks.zeroResultMask : this._statusRegister &= ~NES.CPU.Fastendo.CPUStatusMasks.zeroResultMask;
                (a & 128) === 128 ? this._statusRegister |= NES.CPU.Fastendo.CPUStatusMasks.negativeResultMask : this._statusRegister &= ~NES.CPU.Fastendo.CPUStatusMasks.negativeResultMask
            }, LDA: function () { this._accumulator = this._decodeOperand(); this._setZNFlags(this._accumulator) }, LDX: function () { this._indexRegisterX = this._decodeOperand(); this._setZNFlags(this._indexRegisterX) }, LDY: function () { this._indexRegisterY = this._decodeOperand(); this._setZNFlags(this._indexRegisterY) }, STA: function () { this.setByte(this._decodeAddress(), this._accumulator) },
            STX: function () { this.setByte(this._decodeAddress(), this._indexRegisterX) }, STY: function () { this.setByte(this._decodeAddress(), this._indexRegisterY) }, SED: function () { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.decimalModeMask, !0) }, CLD: function () { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.decimalModeMask, !1) }, JMP: function () { this._programCounter = this.curinst_AddressingMode === NES.CPU.Fastendo.AddressingModes.indirect && this.curinst_Parameters0 === 255 ? 255 | this.curinst_Parameters1 << 8 : this._decodeAddress() },
            DEC: function () { var a = this._decodeOperand(); a--; this.setByte(this._decodeAddress(), a); this._setZNFlags(a) }, INC: function () { var a = this._decodeOperand(); a++; this.setByte(this._decodeAddress(), a); this._setZNFlags(a) }, ADC: function () {
                var a = this._decodeOperand(), b = this._accumulator + a + (this._statusRegister & 1); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, b > 255); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.overflowMask, ((this._accumulator ^ a) & 128) !== 128 && ((this._accumulator ^ b) & 128) === 128); this._accumulator =
b & 255; this._setZNFlags(this._accumulator)
            }, LSR: function () { var a = this._decodeOperand(); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, (a & 1) === 1); a = a >> 1 & 255; this._setZNFlags(a); this.curinst_AddressingMode === NES.CPU.Fastendo.AddressingModes.accumulator ? this._accumulator = a : this.setByte(this._decodeAddress(), a) }, SBC: function () {
                var a = this._decodeOperand(), b = this._accumulator - a - ((this._statusRegister ^ 1) & 1); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.overflowMask, ((this._accumulator ^ b) & 128) === 128 &&
((this._accumulator ^ a) & 128) === 128); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, b < 256); this._accumulator = b & 255; this._setZNFlags(this._accumulator)
            }, AND: function () { this._accumulator &= this._decodeOperand(); this._setZNFlags(this._accumulator) }, ORA: function () { this._accumulator |= this._decodeOperand(); this._setZNFlags(this._accumulator) }, EOR: function () { this._accumulator ^= this._decodeOperand(); this._setZNFlags(this.get_accumulator()) }, ASL: function () {
                var a = this._decodeOperand(); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask,
(a & 128) === 128); a = a << 1 & 254; this.curinst_AddressingMode === NES.CPU.Fastendo.AddressingModes.accumulator ? this._accumulator = a : this.setByte(this._decodeAddress(), a); this._setZNFlags(a)
            }, BIT: function () { var a = this._decodeOperand(); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.overflowMask, (a & 64) === 64); (a & 128) === 128 ? this._statusRegister |= 128 : this._statusRegister &= 127; (a & this.get_accumulator()) === 0 ? this._statusRegister |= 2 : this._statusRegister &= 253 }, SEC: function () {
                this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask,
!0)
            }, CLC: function () { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, !1) }, SEI: function () { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.interruptDisableMask, !0) }, CLI: function () { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.interruptDisableMask, !1) }, CLV: function () { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.overflowMask, !1) }, _compare: function (a) { this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, a > 255); this._setZNFlags(a & 255) }, CMP: function () { this._compare(this.get_accumulator() + 256 - this._decodeOperand()) },
            CPX: function () { this._compare(this._indexRegisterX + 256 - this._decodeOperand()) }, CPY: function () { this._compare(this._indexRegisterY + 256 - this._decodeOperand()) }, NOP: function () { this.curinst_AddressingMode === NES.CPU.Fastendo.AddressingModes.absoluteX && this._decodeAddress() }, _branch: function () { this.curinst_ExtraTiming = 1; var a = this.curinst_Parameters0 & 255; (a & 128) === 128 && (a -= 256); this._programCounter += a; if ((this._programCounter & 255) < a) this.curinst_ExtraTiming = 2 }, BCC: function () {
                (this._statusRegister & 1) !== 1 &&
this._branch()
            }, BCS: function () { (this._statusRegister & 1) === 1 && this._branch() }, BPL: function () { (this._statusRegister & 128) !== 128 && this._branch() }, BMI: function () { (this._statusRegister & 128) === 128 && this._branch() }, BVC: function () { (this._statusRegister & 64) !== 64 && this._branch() }, BVS: function () { (this._statusRegister & 64) === 64 && this._branch() }, BNE: function () { (this._statusRegister & 2) !== 2 && this._branch() }, BEQ: function () { (this._statusRegister & 2) === 2 && this._branch() }, DEX: function () {
                this._indexRegisterX -= 1; this._indexRegisterX &=
255; this._setZNFlags(this._indexRegisterX)
            }, DEY: function () { this._indexRegisterY -= 1; this._indexRegisterY &= 255; this._setZNFlags(this._indexRegisterY) }, INX: function () { this._indexRegisterX += 1; this._indexRegisterX &= 255; this._setZNFlags(this._indexRegisterX) }, INY: function () { this._indexRegisterY += 1; this._indexRegisterY &= 255; this._setZNFlags(this._indexRegisterY) }, TAX: function () { this._indexRegisterX = this._accumulator; this._setZNFlags(this._indexRegisterX) }, TXA: function () {
                this._accumulator = this._indexRegisterX;
                this._setZNFlags(this._accumulator)
            }, TAY: function () { this._indexRegisterY = this._accumulator; this._setZNFlags(this._indexRegisterY) }, TYA: function () { this._accumulator = this._indexRegisterY; this._setZNFlags(this._accumulator) }, TXS: function () { this._stackPointer = this._indexRegisterX }, TSX: function () { this._indexRegisterX = this._stackPointer; this._setZNFlags(this._indexRegisterX) }, PHA: function () { this.pushStack(this._accumulator) }, PLA: function () { this._accumulator = this.popStack(); this._setZNFlags(this._accumulator) },
            PHP: function () { this.pushStack(this._statusRegister | 48) }, PLP: function () { this._statusRegister = this.popStack() }, JSR: function () { this.pushStack(this._programCounter >> 8 & 255); this.pushStack(this._programCounter - 1 & 255); this._programCounter = this._decodeAddress() }, ROR: function () {
                var a = this._decodeOperand(), b = 0; this.getFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask) && (b = 128); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, (a & 1) === 1); a = a >> 1 | b; this._setZNFlags(a); this.curinst_AddressingMode === NES.CPU.Fastendo.AddressingModes.accumulator ?
this._accumulator = a : this.setByte(this._decodeAddress(), a)
            }, ROL: function () { var a = this._decodeOperand(), b = 0; this.getFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask) && (b = 1); this.setFlag(NES.CPU.Fastendo.CPUStatusMasks.carryMask, (a & 128) === 128); a <<= 1; a &= 255; a |= b; this._setZNFlags(a); this.curinst_AddressingMode === NES.CPU.Fastendo.AddressingModes.accumulator ? this._accumulator = a : this.setByte(this._decodeAddress(), a) }, RTS: function () { var a; a = this.popStack() + 1 & 255; this._programCounter = this.popStack() << 8 | a }, RTI: function () {
                this._statusRegister =
this.popStack(); var a = this.popStack(); this._programCounter = 256 * this.popStack() + a
            }, BRK: function () { this._programCounter += 1; this.pushStack(this._programCounter >> 8 & 255); this.pushStack(this._programCounter & 255); this.pushStack(this._statusRegister | 48); this._statusRegister |= 20; this.set_addressBus(65534); var a = this.getCurrentByte(); this.set_addressBus(65535); var b = this.getCurrentByte(); this._programCounter = a + b * 256 }, _cart: null, _pixelWhizzler: null, get_pixelWhizzler: function () { return this._pixelWhizzler }, set_pixelWhizzler: function (a) {
                this._pixelWhizzler =
a; set_nmiHandler(this._nmiHandler); return a
            }, _soundBopper: null, get_soundBopper: function () { return this._soundBopper }, set_soundBopper: function (a) { this._soundBopper = a; this._soundBopper.set_nmiHandler(this._irqUpdater); return a }, _nmiHandler: null, _nmiHandler: function () { this._handleNMI = !0 }, _irqUpdater: null, _irqUpdater: function () { this._handleIRQ = (this._soundBopper.get_irqAsserted() | this._cart.get_irqAsserted()) === 1 }, get_cart: function () { return this._cart }, set_cart: function (a) {
                this._cart = a; this._cart.set_nmiHandler(this._irqUpdater);
                return a
            }, _stackPointer: 255, get_stackPointer: function () { return this._stackPointer }, pushStack: function (a) { this._rams[this._stackPointer + 256] = a; this._stackPointer--; if (this._stackPointer < 0) this._stackPointer = 255 }, popStack: function () { this._stackPointer++; if (this._stackPointer > 255) this._stackPointer = 0; return this._rams[this._stackPointer + 256] & 255 }, getCurrentByte: function () { this.set_dataBus(this.getByte(this.get_addressBus())); return this.get_dataBus() }, getByte: function (a) {
                var b = 0; switch (a & 61440) {
                    case 0: case 4096: b =
a < 2048 ? this._rams[a] : a >> 8; break; case 8192: case 12288: b = getByte(this._clock, a); break; case 16384: switch (a) { case 16406: break; case 16407: break; case 16405: break; default: b = a >> 8 } break; case 20480: b = a >> 8; break; case 24576: case 28672: case 32768: case 36864: case 40960: case 45056: case 49152: case 53248: case 57344: case 61440: b = this._cart.getByte(this._clock, a); break; default: throw Error("Bullshit!");
                } return b & 255
            }, setCurrentByte: function () { this.setByte(this.get_addressBus(), this.get_dataBus() & 255) }, setByte: function (a,
b) { if (a < 2048) this._rams[a & 2047] = b; else switch (a & 61440) { case 0: case 4096: this._rams[a & 2047] = b; break; case 20480: this.get_cart().setByte(this._clock, a, b); break; case 24576: case 28672: case 32768: case 36864: case 40960: case 45056: case 49152: case 53248: case 57344: case 61440: this.get_cart().setByte(this._clock, a, b); break; case 8192: case 12288: setPPUByte(this._clock, a, b); break; case 16384: switch (a) { case 16404: copySprites(this._rams, b * 256), this.curinst_ExtraTiming += 512 } } }, findNextEvent: function () {
    this._nextEvent =
this._clock + get_nextEventAt()
}, _handleNextEvent: function () { handleEvent(this.get_clock()); this.findNextEvent() }, _debugging: !1, get_debugging: function () { return this._debugging }, set_debugging: function (a) { return this._debugging = a }, get_instructionUsage: function () { return this._instructionUsage }, _instructionHistoryPointer: 255, get_instructionHistoryPointer: function () { return this._instructionHistoryPointer }, get_instructionHistory: function () { return this._instructionHistory }, writeInstructionHistoryAndUsage: function () { this._instructionUsage[this.curinst_OpCode]++ },
            peekInstruction: function (a) { var b = new NES.CPU.Fastendo.Instruction; b.opCode = this.getByte(a++); b.addressingMode = this.addressmode[b.opCode]; b.length = 1; return b } 
        }; NES.CPU.Fastendo.smallInstruction = function () { }; NES.CPU.Fastendo.smallInstruction.unpackInstruction = function (a) { var b = new NES.CPU.Fastendo.Instruction; b.opCode = a & 255; b.parameters0 = a >>> 8 & 255; b.parameters1 = a >>> 16 & 255; return b }; NES.CPU.Fastendo.Instruction = function () { }; NES.CPU.Fastendo.Instruction.prototype = { addressingMode: 0, address: 0, opCode: 0,
            parameters0: 0, parameters1: 0, extraTiming: 0, length: 0
        }; NES.CPU.Fastendo.CPUStatus = function () { }; NES.CPU.Fastendo.CPUStatus.prototype = { statusRegister: 0, programCounter: 0, accumulator: 0, indexRegisterX: 0, indexRegisterY: 0 }; Type.registerNamespace("NES.CPU.nitenedo"); NES.CPU.nitenedo.NESMachine = function (a, b) { cpuCart = this._cart = b; set_chrRomHandler(this._cart); this.initialize() }; NES.CPU.nitenedo.NESMachine.prototype = { _ppu: null, _cart: null, get_cart: function () { return this._cart }, add_soundStatusChanged: function (a) {
            this.__soundStatusChanged =
ss.Delegate.combine(this.__soundStatusChanged, a)
        }, remove_soundStatusChanged: function (a) { this.__soundStatusChanged = ss.Delegate.remove(this.__soundStatusChanged, a) }, __soundStatusChanged: null, _enableSound: !0, get_enableSound: function () { return this._enableSound }, set_enableSound: function (a) { if (this._enableSound !== a) this.__soundStatusChanged != null && this.__soundStatusChanged.invoke(this, ss.EventArgs.Empty), this._enableSound = a; return a }, setupSound: function () { }, _breakpointHit: !1, _doDraw: !1, _frameFinished: function () {
            this._frameOn =
!1
        }, _frameOn: !1, initialize: function () { this._frameCount = 0; initializePPU(); this._cart.initializeCart(); resetCPU(); powerOn() }, reset: function () { this._cart != null && (initializePPU(), this._cart.initializeCart(), resetCPU(), powerOn()) }, _frameCount: 0, get_frameCount: function () { return this._frameCount }, set_frameCount: function (a) { return this._frameCount = a }, add_drawscreen: function (a) { this.__drawscreen = ss.Delegate.combine(this.__drawscreen, a) }, remove_drawscreen: function (a) {
            this.__drawscreen = ss.Delegate.remove(this.__drawscreen,
a)
        }, __drawscreen: null, get_isRunning: function () { return !0 } 
        }; Type.registerNamespace("bulbascript"); bulbascript.bulbascriptApp = function () { }; bulbascript.bulbascriptApp.main = function () { }; bulbascript.bulbascriptApp._nes_Drawscreen = function () { drawFrame() }; bulbascript.bulbascriptApp.loadRom = function (a) { var b = new NES.CPU.Machine.ROMLoader.ByteArrayHolder; b.set_data(a); a = NES.CPU.Machine.ROMLoader.iNESFileHandler.loadROM(null, b); bulbascript.bulbascriptApp.nes = new NES.CPU.nitenedo.NESMachine(null, a); bulbascript.bulbascriptApp.nes.add_drawscreen(bulbascript.bulbascriptApp._nes_Drawscreen) };
        bulbascript.bulbascriptApp.getVidData = function () { return bulbascript.bulbascriptApp.nes.get_PPU().get_videoBuffer() }; bulbascript.bulbascriptApp.getFrameChecksum = function () { return bulbascript.bulbascriptApp.nes.get_PPU().getFrameChecksum() }; NES.CPU.Machine.Carts.BaseCart.registerClass("NES.CPU.Machine.Carts.BaseCart", null, NES.CPU.Machine.Carts.INESCart); NES.CPU.Machine.ROMLoader.ByteArrayHolder.registerClass("NES.CPU.Machine.ROMLoader.ByteArrayHolder"); NES.CPU.Machine.ROMLoader.iNESFileHandler.registerClass("NES.CPU.Machine.ROMLoader.iNESFileHandler");
        NES.CPU.NESCart.registerClass("NES.CPU.NESCart", NES.CPU.Machine.Carts.BaseCart); NES.CPU.Fastendo.CPU2A03.registerClass("NES.CPU.Fastendo.CPU2A03"); NES.CPU.Fastendo.smallInstruction.registerClass("NES.CPU.Fastendo.smallInstruction"); NES.CPU.Fastendo.Instruction.registerClass("NES.CPU.Fastendo.Instruction"); NES.CPU.Fastendo.CPUStatus.registerClass("NES.CPU.Fastendo.CPUStatus"); NES.CPU.nitenedo.NESMachine.registerClass("NES.CPU.nitenedo.NESMachine"); NES.CPU.PPUClasses.NESSprite.registerClass("NES.CPU.PPUClasses.NESSprite");
        NES.CPU.PPUClasses.PPUWriteEvent.registerClass("NES.CPU.PPUClasses.PPUWriteEvent"); bulbascript.bulbascriptApp.registerClass("bulbascript.bulbascriptApp"); NES.CPU.Fastendo.CPU2A03._cpuTiming = [7, 6, 0, 0, 3, 2, 5, 0, 3, 2, 2, 0, 6, 4, 6, 0, 2, 5, 0, 0, 3, 3, 6, 0, 2, 4, 2, 0, 6, 4, 7, 0, 6, 6, 0, 0, 3, 2, 5, 0, 3, 2, 2, 0, 4, 4, 6, 0, 2, 5, 0, 0, 3, 3, 6, 0, 2, 4, 2, 0, 6, 4, 7, 0, 6, 6, 0, 0, 3, 2, 5, 0, 3, 2, 2, 0, 3, 4, 6, 0, 2, 5, 0, 0, 0, 3, 6, 0, 2, 4, 2, 0, 6, 4, 6, 0, 6, 6, 0, 0, 3, 3, 5, 0, 3, 2, 2, 0, 5, 4, 6, 0, 2, 5, 0, 0, 0, 4, 6, 0, 2, 4, 2, 0, 6, 4, 7, 0, 3, 6, 3, 0, 3, 3, 3, 0, 2, 3, 2, 0, 4, 4, 4, 0, 2, 6, 0, 0, 4, 4, 4, 0, 2, 5, 2,
0, 0, 5, 0, 0, 2, 6, 2, 0, 3, 3, 3, 0, 2, 2, 2, 0, 4, 4, 4, 0, 2, 5, 0, 0, 4, 4, 4, 0, 2, 4, 2, 0, 4, 4, 4, 0, 2, 6, 3, 0, 3, 2, 5, 0, 2, 2, 2, 0, 4, 4, 6, 0, 2, 5, 0, 0, 3, 4, 6, 0, 2, 4, 2, 0, 6, 4, 7, 0, 2, 6, 3, 0, 3, 3, 5, 0, 2, 2, 2, 0, 4, 4, 6, 0, 2, 5, 0, 0, 3, 4, 6, 0, 2, 4, 2, 0, 6, 4, 7, 0]; bulbascript.bulbascriptApp.nes = null
    })
})();