Texture2D texture2d;
Texture2D nesPal;

SamplerState linearSampler
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};

SamplerState palSampler
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};

struct VS_IN
{
	float4 position : POSITION;
	float4 color : COLOR;
	float2 UV: TEXCOORD0;
};

struct PS_IN
{
	float4 position : SV_POSITION;
	float4 color : COLOR;
	float2 UV: TEXCOORD0;
};


// nes rgb palette
const float4 palette[256] = {
	float4(0.4726563, 0.4804688, 0.4726563, 1.0), 
	float4(0.046875, 0.1484375, 0.6328125, 1.0), 
	float4(0.15625, 0.0625, 0.6796875, 1.0), 
	float4(0.3671875, 0.04296875, 0.6289063, 1.0), 
	float4(0.5351563, 0.00390625, 0.4609375, 1.0), 
	float4(0.5742188, 0.01953125, 0.1640625, 1.0), 
	float4(0.5703125, 0.0625, 0.04296875, 1.0), 
	float4(0.4335938, 0.1484375, 0.015625, 1.0), 
	float4(0.2773438, 0.2539063, 0.015625, 1.0), 
	float4(0.078125, 0.3398438, 0.015625, 1.0), 
	float4(0.02734375, 0.3671875, 0.04296875, 1.0), 
	float4(0.0078125, 0.3242188, 0.1796875, 1.0), 
	float4(0.01953125, 0.2773438, 0.4257813, 1.0), 
	float4(0, 0, 0, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.7460938, 0.75, 0.7460938, 1.0), 
	float4(0.0859375, 0.4101563, 0.8710938, 1.0), 
	float4(0.2929688, 0.2539063, 0.9296875, 1.0), 
	float4(0.5546875, 0.1523438, 0.8828125, 1.0), 
	float4(0.765625, 0.09765625, 0.7265625, 1.0), 
	float4(0.828125, 0.125, 0.3867188, 1.0), 
	float4(0.828125, 0.2148438, 0.1289063, 1.0), 
	float4(0.7070313, 0.3515625, 0.05078125, 1.0), 
	float4(0.5390625, 0.4765625, 0.015625, 1.0), 
	float4(0.2265625, 0.5703125, 0.02734375, 1.0), 
	float4(0.078125, 0.6015625, 0.09375, 1.0), 
	float4(0.03515625, 0.5976563, 0.3515625, 1.0), 
	float4(0.03515625, 0.5429688, 0.6601563, 1.0), 
	float4(0.1757813, 0.1835938, 0.1757813, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.9570313, 0.9609375, 0.96875, 1.0), 
	float4(0.2851563, 0.6953125, 0.96875, 1.0), 
	float4(0.5351563, 0.578125, 0.9882813, 1.0), 
	float4(0.7578125, 0.4726563, 0.9765625, 1.0), 
	float4(0.9140625, 0.4335938, 0.9257813, 1.0), 
	float4(0.953125, 0.4570313, 0.7265625, 1.0), 
	float4(0.9648438, 0.5117188, 0.421875, 1.0), 
	float4(0.9296875, 0.6328125, 0.2695313, 1.0), 
	float4(0.8398438, 0.75, 0.1328125, 1.0), 
	float4(0.5976563, 0.828125, 0.125, 1.0), 
	float4(0.3125, 0.8671875, 0.265625, 1.0), 
	float4(0.2382813, 0.8632813, 0.578125, 1.0), 
	float4(0.1679688, 0.84375, 0.8671875, 1.0), 
	float4(0.3867188, 0.3984375, 0.390625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.96875, 0.9726563, 0.9765625, 1.0), 
	float4(0.703125, 0.8671875, 0.9765625, 1.0), 
	float4(0.796875, 0.8164063, 0.9882813, 1.0), 
	float4(0.8710938, 0.7734375, 0.9804688, 1.0), 
	float4(0.9453125, 0.75, 0.9648438, 1.0), 
	float4(0.9609375, 0.7617188, 0.8867188, 1.0), 
	float4(0.9648438, 0.796875, 0.7617188, 1.0), 
	float4(0.9570313, 0.8515625, 0.6757813, 1.0), 
	float4(0.921875, 0.8984375, 0.5976563, 1.0), 
	float4(0.8203125, 0.9257813, 0.609375, 1.0), 
	float4(0.71875, 0.9414063, 0.703125, 1.0), 
	float4(0.6875, 0.9453125, 0.8476563, 1.0), 
	float4(0.6484375, 0.9375, 0.9453125, 1.0), 
	float4(0.78125, 0.7773438, 0.78125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0),
	float4(0.4726563, 0.4804688, 0.4726563, 1.0), 
	float4(0.046875, 0.1484375, 0.6328125, 1.0), 
	float4(0.15625, 0.0625, 0.6796875, 1.0), 
	float4(0.3671875, 0.04296875, 0.6289063, 1.0), 
	float4(0.5351563, 0.00390625, 0.4609375, 1.0), 
	float4(0.5742188, 0.01953125, 0.1640625, 1.0), 
	float4(0.5703125, 0.0625, 0.04296875, 1.0), 
	float4(0.4335938, 0.1484375, 0.015625, 1.0), 
	float4(0.2773438, 0.2539063, 0.015625, 1.0), 
	float4(0.078125, 0.3398438, 0.015625, 1.0), 
	float4(0.02734375, 0.3671875, 0.04296875, 1.0), 
	float4(0.0078125, 0.3242188, 0.1796875, 1.0), 
	float4(0.01953125, 0.2773438, 0.4257813, 1.0), 
	float4(0, 0, 0, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.7460938, 0.75, 0.7460938, 1.0), 
	float4(0.0859375, 0.4101563, 0.8710938, 1.0), 
	float4(0.2929688, 0.2539063, 0.9296875, 1.0), 
	float4(0.5546875, 0.1523438, 0.8828125, 1.0), 
	float4(0.765625, 0.09765625, 0.7265625, 1.0), 
	float4(0.828125, 0.125, 0.3867188, 1.0), 
	float4(0.828125, 0.2148438, 0.1289063, 1.0), 
	float4(0.7070313, 0.3515625, 0.05078125, 1.0), 
	float4(0.5390625, 0.4765625, 0.015625, 1.0), 
	float4(0.2265625, 0.5703125, 0.02734375, 1.0), 
	float4(0.078125, 0.6015625, 0.09375, 1.0), 
	float4(0.03515625, 0.5976563, 0.3515625, 1.0), 
	float4(0.03515625, 0.5429688, 0.6601563, 1.0), 
	float4(0.1757813, 0.1835938, 0.1757813, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.9570313, 0.9609375, 0.96875, 1.0), 
	float4(0.2851563, 0.6953125, 0.96875, 1.0), 
	float4(0.5351563, 0.578125, 0.9882813, 1.0), 
	float4(0.7578125, 0.4726563, 0.9765625, 1.0), 
	float4(0.9140625, 0.4335938, 0.9257813, 1.0), 
	float4(0.953125, 0.4570313, 0.7265625, 1.0), 
	float4(0.9648438, 0.5117188, 0.421875, 1.0), 
	float4(0.9296875, 0.6328125, 0.2695313, 1.0), 
	float4(0.8398438, 0.75, 0.1328125, 1.0), 
	float4(0.5976563, 0.828125, 0.125, 1.0), 
	float4(0.3125, 0.8671875, 0.265625, 1.0), 
	float4(0.2382813, 0.8632813, 0.578125, 1.0), 
	float4(0.1679688, 0.84375, 0.8671875, 1.0), 
	float4(0.3867188, 0.3984375, 0.390625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.96875, 0.9726563, 0.9765625, 1.0), 
	float4(0.703125, 0.8671875, 0.9765625, 1.0), 
	float4(0.796875, 0.8164063, 0.9882813, 1.0), 
	float4(0.8710938, 0.7734375, 0.9804688, 1.0), 
	float4(0.9453125, 0.75, 0.9648438, 1.0), 
	float4(0.9609375, 0.7617188, 0.8867188, 1.0), 
	float4(0.9648438, 0.796875, 0.7617188, 1.0), 
	float4(0.9570313, 0.8515625, 0.6757813, 1.0), 
	float4(0.921875, 0.8984375, 0.5976563, 1.0), 
	float4(0.8203125, 0.9257813, 0.609375, 1.0), 
	float4(0.71875, 0.9414063, 0.703125, 1.0), 
	float4(0.6875, 0.9453125, 0.8476563, 1.0), 
	float4(0.6484375, 0.9375, 0.9453125, 1.0), 
	float4(0.78125, 0.7773438, 0.78125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0),
	float4(0.4726563, 0.4804688, 0.4726563, 1.0), 
	float4(0.046875, 0.1484375, 0.6328125, 1.0), 
	float4(0.15625, 0.0625, 0.6796875, 1.0), 
	float4(0.3671875, 0.04296875, 0.6289063, 1.0), 
	float4(0.5351563, 0.00390625, 0.4609375, 1.0), 
	float4(0.5742188, 0.01953125, 0.1640625, 1.0), 
	float4(0.5703125, 0.0625, 0.04296875, 1.0), 
	float4(0.4335938, 0.1484375, 0.015625, 1.0), 
	float4(0.2773438, 0.2539063, 0.015625, 1.0), 
	float4(0.078125, 0.3398438, 0.015625, 1.0), 
	float4(0.02734375, 0.3671875, 0.04296875, 1.0), 
	float4(0.0078125, 0.3242188, 0.1796875, 1.0), 
	float4(0.01953125, 0.2773438, 0.4257813, 1.0), 
	float4(0, 0, 0, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.7460938, 0.75, 0.7460938, 1.0), 
	float4(0.0859375, 0.4101563, 0.8710938, 1.0), 
	float4(0.2929688, 0.2539063, 0.9296875, 1.0), 
	float4(0.5546875, 0.1523438, 0.8828125, 1.0), 
	float4(0.765625, 0.09765625, 0.7265625, 1.0), 
	float4(0.828125, 0.125, 0.3867188, 1.0), 
	float4(0.828125, 0.2148438, 0.1289063, 1.0), 
	float4(0.7070313, 0.3515625, 0.05078125, 1.0), 
	float4(0.5390625, 0.4765625, 0.015625, 1.0), 
	float4(0.2265625, 0.5703125, 0.02734375, 1.0), 
	float4(0.078125, 0.6015625, 0.09375, 1.0), 
	float4(0.03515625, 0.5976563, 0.3515625, 1.0), 
	float4(0.03515625, 0.5429688, 0.6601563, 1.0), 
	float4(0.1757813, 0.1835938, 0.1757813, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.9570313, 0.9609375, 0.96875, 1.0), 
	float4(0.2851563, 0.6953125, 0.96875, 1.0), 
	float4(0.5351563, 0.578125, 0.9882813, 1.0), 
	float4(0.7578125, 0.4726563, 0.9765625, 1.0), 
	float4(0.9140625, 0.4335938, 0.9257813, 1.0), 
	float4(0.953125, 0.4570313, 0.7265625, 1.0), 
	float4(0.9648438, 0.5117188, 0.421875, 1.0), 
	float4(0.9296875, 0.6328125, 0.2695313, 1.0), 
	float4(0.8398438, 0.75, 0.1328125, 1.0), 
	float4(0.5976563, 0.828125, 0.125, 1.0), 
	float4(0.3125, 0.8671875, 0.265625, 1.0), 
	float4(0.2382813, 0.8632813, 0.578125, 1.0), 
	float4(0.1679688, 0.84375, 0.8671875, 1.0), 
	float4(0.3867188, 0.3984375, 0.390625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.96875, 0.9726563, 0.9765625, 1.0), 
	float4(0.703125, 0.8671875, 0.9765625, 1.0), 
	float4(0.796875, 0.8164063, 0.9882813, 1.0), 
	float4(0.8710938, 0.7734375, 0.9804688, 1.0), 
	float4(0.9453125, 0.75, 0.9648438, 1.0), 
	float4(0.9609375, 0.7617188, 0.8867188, 1.0), 
	float4(0.9648438, 0.796875, 0.7617188, 1.0), 
	float4(0.9570313, 0.8515625, 0.6757813, 1.0), 
	float4(0.921875, 0.8984375, 0.5976563, 1.0), 
	float4(0.8203125, 0.9257813, 0.609375, 1.0), 
	float4(0.71875, 0.9414063, 0.703125, 1.0), 
	float4(0.6875, 0.9453125, 0.8476563, 1.0), 
	float4(0.6484375, 0.9375, 0.9453125, 1.0), 
	float4(0.78125, 0.7773438, 0.78125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0),
	float4(0.4726563, 0.4804688, 0.4726563, 1.0), 
	float4(0.046875, 0.1484375, 0.6328125, 1.0), 
	float4(0.15625, 0.0625, 0.6796875, 1.0), 
	float4(0.3671875, 0.04296875, 0.6289063, 1.0), 
	float4(0.5351563, 0.00390625, 0.4609375, 1.0), 
	float4(0.5742188, 0.01953125, 0.1640625, 1.0), 
	float4(0.5703125, 0.0625, 0.04296875, 1.0), 
	float4(0.4335938, 0.1484375, 0.015625, 1.0), 
	float4(0.2773438, 0.2539063, 0.015625, 1.0), 
	float4(0.078125, 0.3398438, 0.015625, 1.0), 
	float4(0.02734375, 0.3671875, 0.04296875, 1.0), 
	float4(0.0078125, 0.3242188, 0.1796875, 1.0), 
	float4(0.01953125, 0.2773438, 0.4257813, 1.0), 
	float4(0, 0, 0, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.0078125, 0.0078125, 0.0078125, 1.0), 
	float4(0.7460938, 0.75, 0.7460938, 1.0), 
	float4(0.0859375, 0.4101563, 0.8710938, 1.0), 
	float4(0.2929688, 0.2539063, 0.9296875, 1.0), 
	float4(0.5546875, 0.1523438, 0.8828125, 1.0), 
	float4(0.765625, 0.09765625, 0.7265625, 1.0), 
	float4(0.828125, 0.125, 0.3867188, 1.0), 
	float4(0.828125, 0.2148438, 0.1289063, 1.0), 
	float4(0.7070313, 0.3515625, 0.05078125, 1.0), 
	float4(0.5390625, 0.4765625, 0.015625, 1.0), 
	float4(0.2265625, 0.5703125, 0.02734375, 1.0), 
	float4(0.078125, 0.6015625, 0.09375, 1.0), 
	float4(0.03515625, 0.5976563, 0.3515625, 1.0), 
	float4(0.03515625, 0.5429688, 0.6601563, 1.0), 
	float4(0.1757813, 0.1835938, 0.1757813, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.01171875, 0.01171875, 0.01171875, 1.0), 
	float4(0.9570313, 0.9609375, 0.96875, 1.0), 
	float4(0.2851563, 0.6953125, 0.96875, 1.0), 
	float4(0.5351563, 0.578125, 0.9882813, 1.0), 
	float4(0.7578125, 0.4726563, 0.9765625, 1.0), 
	float4(0.9140625, 0.4335938, 0.9257813, 1.0), 
	float4(0.953125, 0.4570313, 0.7265625, 1.0), 
	float4(0.9648438, 0.5117188, 0.421875, 1.0), 
	float4(0.9296875, 0.6328125, 0.2695313, 1.0), 
	float4(0.8398438, 0.75, 0.1328125, 1.0), 
	float4(0.5976563, 0.828125, 0.125, 1.0), 
	float4(0.3125, 0.8671875, 0.265625, 1.0), 
	float4(0.2382813, 0.8632813, 0.578125, 1.0), 
	float4(0.1679688, 0.84375, 0.8671875, 1.0), 
	float4(0.3867188, 0.3984375, 0.390625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.015625, 0.015625, 0.015625, 1.0), 
	float4(0.96875, 0.9726563, 0.9765625, 1.0), 
	float4(0.703125, 0.8671875, 0.9765625, 1.0), 
	float4(0.796875, 0.8164063, 0.9882813, 1.0), 
	float4(0.8710938, 0.7734375, 0.9804688, 1.0), 
	float4(0.9453125, 0.75, 0.9648438, 1.0), 
	float4(0.9609375, 0.7617188, 0.8867188, 1.0), 
	float4(0.9648438, 0.796875, 0.7617188, 1.0), 
	float4(0.9570313, 0.8515625, 0.6757813, 1.0), 
	float4(0.921875, 0.8984375, 0.5976563, 1.0), 
	float4(0.8203125, 0.9257813, 0.609375, 1.0), 
	float4(0.71875, 0.9414063, 0.703125, 1.0), 
	float4(0.6875, 0.9453125, 0.8476563, 1.0), 
	float4(0.6484375, 0.9375, 0.9453125, 1.0), 
	float4(0.78125, 0.7773438, 0.78125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0), 
	float4(0.01953125, 0.01953125, 0.01953125, 1.0),
 };

PS_IN VS( VS_IN vertexShaderIn )
{
	PS_IN vertexShaderOut = (PS_IN)0;
	
	vertexShaderOut.position = vertexShaderIn.position;
	vertexShaderOut.color = vertexShaderIn.color;
	vertexShaderOut.UV = vertexShaderIn.UV;
	
	return vertexShaderOut;
}

float4 PS( PS_IN pixelShaderIn ) : SV_Target
{
    float4 finalColor = texture2d.Sample( linearSampler, pixelShaderIn.UV );
	return finalColor;	
}

float4 DrawTogether( PS_IN pixelShaderIn ) : SV_Target
{
	float4 finalColor = texture2d.Sample( linearSampler, pixelShaderIn.UV );
	// tileIndex in r, spriteIndex in g, isSprite in b

	if (finalColor.b == 0)
		return palette[finalColor.r * 255.0 ];	
	else
		return palette[finalColor.g * 255.0 ];	
}

float4 DrawTilesOnly( PS_IN pixelShaderIn ) : SV_Target
{
	float4 finalColor = texture2d.Sample( linearSampler, pixelShaderIn.UV );
	// current palette index in a
	// tileIndex in r, spriteIndex in g, isSprite in b
	// calculate the address of the nes palette value in the palCache
	
	float2 palAddy = float2( (finalColor.r * 7.0) , 0 );

	// get the nes palette entry (will contain 4 values)
	float4 rVal = nesPal.Sample(palSampler, palAddy);
	
	int index = (finalColor.r * 31.0) ;
	index = index & 3;
	
	float palindex;
	// decode nes pal entry 
	// lookup actual pixel
	
	return palette[rVal[index] * 255.0 ];
}

float4 DrawSpritesOnly( PS_IN pixelShaderIn ) : SV_Target
{
	float4 finalColor = texture2d.Sample( linearSampler, pixelShaderIn.UV );
	// tileIndex in r, spriteIndex in g, isSprite in b

	if (finalColor.b > 0)
		return palette[finalColor.g * 255.0 ];	
}


technique10 Render
{
	pass P0
	{
		SetGeometryShader( 0 );
		SetVertexShader( CompileShader( vs_4_0, VS() ) );
		SetPixelShader( CompileShader( ps_4_0, DrawTilesOnly() ) );
	}
	
}

